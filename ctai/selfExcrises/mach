#!/usr/bin/env python
# This source code is motivated by mozilla build system.

from __future__ import print_function, unicode_literals

import os
import sys

def ancestors(path):
    while path:
        yield path
        (path, child) = os.path.split(path)
        if child == "":
            break

def load_mach(topsrcdir):
    sys.path[0:0] = [os.path.join(topsrcdir, "build")]
    import mach_bootstrap
    return mach_bootstrap.bootstrap(topsrcdir)

# Check whether the current directory is within a mach src or obj dir.
for dir_path in ancestors(os.getcwd()):
    # If we find a "hceinfo.json" file, we are in the objdir.
    hceinfo_path = os.path.join(dir_path, "hceinfo.json")
    if os.path.isfile(hceinfo_path):
        import json
        info = json.load(open(hceinfo_path))
        if "hceconfig" in info and "HCECONFIG" not in os.environ:
            # If the HCECONFIG environment variable is not already set, set it
            # to the value from mozinfo.json.  This will tell the build system
            # to look for a config file at the path in $HCECONFIG rather than
            # its default locations.
            #
            # Note: subprocess requires native strings in os.environ Python
            # 2.7.2 and earlier on Windows.
            os.environ[b"HCECONFIG"] = str(info["hceconfig"])

        if "topsrcdir" in info:
            # Continue searching for mach_bootstrap in the source directory.
            dir_path = info["topsrcdir"]

    # If we find the mach bootstrap module, we are in the srcdir.
    mach_path = os.path.join(dir_path, "build/mach_bootstrap.py")
    if os.path.isfile(mach_path):
        mach = load_mach(dir_path)
        sys.exit(mach.run(sys.argv[1:]))

print("Could not run mach: No mach source directory found")
sys.exit(1)
    
// Copyright (c) 2009-2011 Intel Corporation
// All rights reserved.
// 
// WARRANTY DISCLAIMER
// 
// THESE MATERIALS ARE PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INTEL OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THESE
// MATERIALS, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// Intel Corporation is the author of the Materials, and requests that all
// problem reports or change requests be submitted to it directly


#pragma once

#include <d3dx9.h>

#define F_NEAR 0.1f
#define F_FAR  10000.0f
#define FOV  (float)D3DX_PI*0.25f

class CFreeCamera
{
public:
	CFreeCamera(void);
	CFreeCamera(D3DXVECTOR3 i_vEye);

	D3DXVECTOR3 getEye(void);
	D3DXVECTOR2 getRot(void);
	D3DXVECTOR3 getLocalAt(void);

	D3DXMATRIX getViewMatrix(void);
	D3DXMATRIX getProjMatrix(void);

	void translateGlobal(D3DXVECTOR3 vTrans);
	void translateLocal(D3DXVECTOR3 vTrans);
	void rotate(float rx, float ry);

	~CFreeCamera(void);
private:
	D3DXMATRIX mView;
	D3DXMATRIX mProj;
	D3DXVECTOR3 vEye;
	D3DXVECTOR3 vAt;
	D3DXVECTOR3 vUp;
	D3DXVECTOR2 vRot;

	float fAspectRatio;
};

